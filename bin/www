#!/usr/bin/env node

const debug = require("debug")("discognito-api:server");
const { server, io } = require("./server.js");
const discognito = require("../discognito/index.js");

// Discognito client connection listener
io.on("connection", (socket) => {
  console.log("Discognito client connected!");

  // map out a digestable array of text channels to be sent to the Discognito client for rendering
  const textChannels = discognito.textChannels.map((channel) => {
    return {
      guildName: channel.guild.name,
      guildID: channel.guild.id,
      name: channel.name,
      ID: channel.id,
      topic: channel.topic,
    };
  });
  console.log(textChannels);
  io.emit("get channels", textChannels);
});

// Log Discognito bot into Discord
discognito.login(process.env.DISCORD_TOKEN);

// start server
server.listen(process.env.PORT);
console.log(`Listening on http://localhost:${process.env.PORT}`);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
